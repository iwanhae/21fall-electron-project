/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three';
import React, { forwardRef } from 'react';
import { useGLTF } from '@react-three/drei';
import { GLTF } from 'three/examples/jsm/loaders/GLTFLoader';
import { setPose } from '@library/functions';

type GLTFResult = GLTF & {
  nodes: {
    Beta_Joints: THREE.SkinnedMesh;
    Beta_Surface: THREE.SkinnedMesh;
    mixamorigHips: THREE.Bone;
  };
  materials: {
    Beta_Joints_MAT: THREE.MeshStandardMaterial;
    ['asdf1:Beta_HighLimbsGeoSG2']: THREE.MeshStandardMaterial;
  };
};

interface ModelProps {
  index: number;
  position: THREE.Vector3;
}

const Model = forwardRef<THREE.Group, ModelProps>(({ index, position }, ref) => {
  // get elements of GLTF file
  const { nodes, materials } = useGLTF('/Xbot.glb') as GLTFResult;

  // set rotations of bones
  setPose(index, nodes.Beta_Joints.skeleton.bones);

  return (
    <group ref={ref} dispose={null} position={position}>
      <group scale={0.02}>
        <primitive object={nodes.mixamorigHips} />
        <skinnedMesh
          castShadow
          receiveShadow
          geometry={nodes.Beta_Joints.geometry}
          material={materials.Beta_Joints_MAT}
          skeleton={nodes.Beta_Joints.skeleton}
        />
        <skinnedMesh
          castShadow
          receiveShadow
          geometry={nodes.Beta_Surface.geometry}
          material={materials['asdf1:Beta_HighLimbsGeoSG2']}
          skeleton={nodes.Beta_Surface.skeleton}
        />
      </group>
    </group>
  );
});
Model.displayName = 'Model';

useGLTF.preload('/Xbot.glb');

export default Model;
